{"ast":null,"code":"var _jsxFileName = \"F:\\\\DB project\\\\sust-medical-center-automation\\\\Client site\\\\sust-medical-center\\\\src\\\\Pages\\\\DoctorProfile\\\\DoctorNotification.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Navbar from '../DoctorNavbar';\nimport Axios from 'axios';\nimport Box from \"@mui/material/Box\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction DoctorNotification() {\n  _s();\n\n  const [appointlist, setAppointlist] = useState([]);\n  const [zoomlink, setZoomlink] = useState(\"\");\n  const [meetingtime, setMeetingtime] = useState(\"\");\n  const [status, setStatus] = useState(\"Scheduled\");\n  const [username, setUsername] = useState(\"\");\n  const [doctorList, setDoctorList] = useState([]);\n  const [authState, setAuthState] = useState({\n    username: \"\",\n    id: 0,\n    status: false\n  });\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/fetchAppointDetails\").then(response => {\n      setAppointlist(response.data); //console.log(userList.length);\n      //console.log(response.data);\n    });\n  }, []);\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/authen\", {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      if (response.data.error) {\n        //setAuthState(false);\n        setAuthState({ ...authState,\n          status: false\n        });\n      } else if (response.data.email != null) {\n        console.log(response);\n        setAuthState({\n          username: response.data.username,\n          id: response.data.id,\n          status: true\n        });\n        setUsername(response.data.username);\n        console.log(username);\n      } else {\n        //setAuthState(false);\n        setAuthState({ ...authState,\n          status: false\n        });\n      }\n    });\n  }, []);\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/fetchDoctorProfile\").then(response => {\n      setDoctorList(response.data); //console.log(userList.length);\n\n      {\n        doctorList.map((val, key) => {\n          if (val.username == username) {\n            setZoomlink(val.zoomlink);\n          }\n        });\n      } //console.log(response.data);\n    });\n  }, []);\n\n  const scheduling = (username, meetingtime) => {\n    Axios.put(\"http://localhost:3001/updatingmeetingschedule\", {\n      username: username,\n      meetingtime: meetingtime,\n      status: status,\n      zoomlink: zoomlink\n    }).then(response => {\n      console.log(response);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Appointment Requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this), appointlist.map((val, key) => {\n      if (val.status == \"\") {\n        return /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            width: \"100%\"\n          },\n          marginTop: 10,\n          marginBottom: 8,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"employee\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: [val.name, \" \", \" \", \"request for a online appointment as he/she has been suffering from \", val.symptom]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                children: [\"Preffer Time: \", val.prefferedtime]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                children: [\"a short message: \", val.symptomDetails]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  scheduling(val.username, val.prefferedtime);\n                },\n                children: [\" \", \"Approve\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 17\n              }, this), \"    \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this);\n      }\n    })]\n  }, void 0, true);\n}\n\n_s(DoctorNotification, \"/xof79qy+clYDBdh/qMDup7v7Jo=\");\n\n_c = DoctorNotification;\nexport default DoctorNotification;\n\nvar _c;\n\n$RefreshReg$(_c, \"DoctorNotification\");","map":{"version":3,"sources":["F:/DB project/sust-medical-center-automation/Client site/sust-medical-center/src/Pages/DoctorProfile/DoctorNotification.js"],"names":["React","useEffect","useState","Navbar","Axios","Box","DoctorNotification","appointlist","setAppointlist","zoomlink","setZoomlink","meetingtime","setMeetingtime","status","setStatus","username","setUsername","doctorList","setDoctorList","authState","setAuthState","id","get","then","response","data","headers","accessToken","localStorage","getItem","error","email","console","log","map","val","key","scheduling","put","width","name","symptom","prefferedtime","symptomDetails"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;;;;AAEA,SAASC,kBAAT,GAA8B;AAAA;;AAE1B,QAAM,CAACC,WAAD,EAAaC,cAAb,IAA+BN,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACO,QAAD,EAAUC,WAAV,IAAyBR,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACS,WAAD,EAAaC,cAAb,IAA+BV,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACW,MAAD,EAAQC,SAAR,IAAqBZ,QAAQ,CAAC,WAAD,CAAnC;AACA,QAAM,CAACa,QAAD,EAAUC,WAAV,IAAyBd,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACe,UAAD,EAAYC,aAAZ,IAA6BhB,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC;AACvCa,IAAAA,QAAQ,EAAE,EAD6B;AAEvCM,IAAAA,EAAE,EAAE,CAFmC;AAGvCR,IAAAA,MAAM,EAAE;AAH+B,GAAD,CAA1C;AAOAZ,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,KAAK,CAACkB,GAAN,CAAU,2CAAV,EAAuDC,IAAvD,CAA6DC,QAAD,IAAc;AACxEhB,MAAAA,cAAc,CAACgB,QAAQ,CAACC,IAAV,CAAd,CADwE,CAExE;AAGA;AACD,KAND;AAOD,GARM,EAQL,EARK,CAAT;AAWExB,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,KAAK,CACFkB,GADH,CACO,8BADP,EACuC;AACnCI,MAAAA,OAAO,EAAE;AACPC,QAAAA,WAAW,EAAEC,YAAY,CAACC,OAAb,CAAqB,aAArB;AADN;AAD0B,KADvC,EAMGN,IANH,CAMSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcK,KAAlB,EAAyB;AACvB;AACAV,QAAAA,YAAY,CAAC,EAAE,GAAGD,SAAL;AAAgBN,UAAAA,MAAM,EAAE;AAAxB,SAAD,CAAZ;AACD,OAHD,MAGO,IAAGW,QAAQ,CAACC,IAAT,CAAcM,KAAd,IAAsB,IAAzB,EAAgC;AACrCC,QAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACAJ,QAAAA,YAAY,CAAC;AACXL,UAAAA,QAAQ,EAAES,QAAQ,CAACC,IAAT,CAAcV,QADb;AAEXM,UAAAA,EAAE,EAAEG,QAAQ,CAACC,IAAT,CAAcJ,EAFP;AAGXR,UAAAA,MAAM,EAAE;AAHG,SAAD,CAAZ;AAMAG,QAAAA,WAAW,CAACQ,QAAQ,CAACC,IAAT,CAAcV,QAAf,CAAX;AACAiB,QAAAA,OAAO,CAACC,GAAR,CAAYlB,QAAZ;AAED,OAXM,MAaP;AACE;AACAK,QAAAA,YAAY,CAAC,EAAE,GAAGD,SAAL;AAAgBN,UAAAA,MAAM,EAAE;AAAxB,SAAD,CAAZ;AACD;AACF,KA3BH;AA4BD,GA7BQ,EA6BN,EA7BM,CAAT;AAgCAZ,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,KAAK,CAACkB,GAAN,CAAU,0CAAV,EAAsDC,IAAtD,CAA4DC,QAAD,IAAc;AACvEN,MAAAA,aAAa,CAACM,QAAQ,CAACC,IAAV,CAAb,CADuE,CAEvE;;AACA;AAACR,QAAAA,UAAU,CAACiB,GAAX,CAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,cAAGD,GAAG,CAACpB,QAAJ,IAAgBA,QAAnB,EACA;AACIL,YAAAA,WAAW,CAACyB,GAAG,CAAC1B,QAAL,CAAX;AACH;AACF,SALA;AAOF,OAVwE,CAavE;AACD,KAdD;AAeD,GAhBQ,EAgBP,EAhBO,CAAT;;AAmBA,QAAM4B,UAAU,GAAG,CAACtB,QAAD,EAAUJ,WAAV,KAA0B;AAE3CP,IAAAA,KAAK,CAACkC,GAAN,CAAU,+CAAV,EAA2D;AAAEvB,MAAAA,QAAQ,EAAEA,QAAZ;AAAsBJ,MAAAA,WAAW,EAAEA,WAAnC;AAA+CE,MAAAA,MAAM,EAACA,MAAtD;AAA+DJ,MAAAA,QAAQ,EAACA;AAAxE,KAA3D,EAA8Ic,IAA9I,CACGC,QAAD,IAAc;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACD,KAHH;AAMD,GARD;;AAYJ,sBACE;AAAA,4BACA,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAA;AAAA;AAAA;AAAA,YAHA,eAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJA,EAKCjB,WAAW,CAAC2B,GAAZ,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC1B,UAAGD,GAAG,CAACtB,MAAJ,IAAY,EAAf,EAAkB;AACjB,4BACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE;AAAE0B,YAAAA,KAAK,EAAE;AAAT,WAAT;AAA4B,UAAA,SAAS,EAAE,EAAvC;AAA2C,UAAA,YAAY,EAAE,CAAzD;AAAA,iCACA;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,oCACE;AAAA,sCACE;AAAA,2BAAKJ,GAAG,CAACK,IAAT,OAAgB,GAAhB,yEACoEL,GAAG,CAACM,OADxE;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAGE;AAAA,6CAAmBN,GAAG,CAACO,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHF,eAIE;AAAA,gDAAsBP,GAAG,CAACQ,cAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eASE;AAAA,sCACE;AACE,gBAAA,OAAO,EAAE,MAAM;AACbN,kBAAAA,UAAU,CAACF,GAAG,CAACpB,QAAL,EAAcoB,GAAG,CAACO,aAAlB,CAAV;AACD,iBAHH;AAAA,2BAKG,GALH;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EASI,MATJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBADF;AAyBO;AACR,KA5BJ,CALD;AAAA,kBADF;AAqCD;;GA9HQpC,kB;;KAAAA,kB;AAgIT,eAAeA,kBAAf","sourcesContent":["import React,{useEffect,useState} from 'react';\r\nimport Navbar from '../DoctorNavbar';\r\nimport Axios from 'axios';\r\nimport Box from \"@mui/material/Box\";\r\n\r\nfunction DoctorNotification() {\r\n\r\n    const [appointlist,setAppointlist] = useState([]);\r\n    const [zoomlink,setZoomlink] = useState(\"\");\r\n    const [meetingtime,setMeetingtime] = useState(\"\");\r\n    const [status,setStatus] = useState(\"Scheduled\");\r\n    const [username,setUsername] = useState(\"\");\r\n    const [doctorList,setDoctorList] = useState([]);\r\n    const [authState, setAuthState] = useState({\r\n        username: \"\",\r\n        id: 0,\r\n        status: false,\r\n        \r\n       });\r\n\r\n    useEffect(() => {\r\n        Axios.get(\"http://localhost:3001/fetchAppointDetails\").then((response) => {\r\n          setAppointlist(response.data);\r\n          //console.log(userList.length);\r\n          \r\n          \r\n          //console.log(response.data);\r\n        });\r\n      },[]);\r\n\r\n\r\n      useEffect(() => {\r\n        Axios\r\n          .get(\"http://localhost:3001/authen\", {\r\n            headers: {\r\n              accessToken: localStorage.getItem(\"accessToken\"),\r\n            },\r\n          })\r\n          .then((response) => {\r\n            if (response.data.error) {\r\n              //setAuthState(false);\r\n              setAuthState({ ...authState, status: false })\r\n            } else if(response.data.email!= null)  {\r\n              console.log(response);\r\n              setAuthState({\r\n                username: response.data.username,\r\n                id: response.data.id,\r\n                status: true,\r\n                \r\n              });\r\n              setUsername(response.data.username);\r\n              console.log(username);\r\n              \r\n            }\r\n            else\r\n            {\r\n              //setAuthState(false);\r\n              setAuthState({ ...authState, status: false })\r\n            }\r\n          });\r\n      }, []);\r\n\r\n\r\n      useEffect(() => {\r\n        Axios.get(\"http://localhost:3001/fetchDoctorProfile\").then((response) => {\r\n          setDoctorList(response.data);\r\n          //console.log(userList.length);\r\n          {doctorList.map((val, key) => {\r\n            if(val.username == username)\r\n            {\r\n                setZoomlink(val.zoomlink);\r\n            }\r\n          }\r\n          )\r\n        }\r\n          \r\n          \r\n          //console.log(response.data);\r\n        });\r\n      },[]);\r\n\r\n\r\n      const scheduling = (username,meetingtime) => {\r\n\r\n        Axios.put(\"http://localhost:3001/updatingmeetingschedule\", { username: username, meetingtime: meetingtime,status:status , zoomlink:zoomlink}).then(\r\n          (response) => {\r\n            console.log(response);\r\n          }\r\n        );\r\n\r\n      }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <Navbar/>\r\n    <br/>\r\n    <br/>\r\n    <h1>Appointment Requests</h1>\r\n    {appointlist.map((val, key) => {\r\n         if(val.status==\"\"){\r\n          return (\r\n            <Box sx={{ width: \"100%\" }} marginTop={10} marginBottom={8}>\r\n            <div className=\"employee\">\r\n              <div>\r\n                <h5>{val.name} {\" \"}\r\n                request for a online appointment as he/she has been suffering from {val.symptom}</h5>\r\n                <h5>Preffer Time: {val.prefferedtime}</h5>\r\n                <h5>a short message: {val.symptomDetails}</h5>\r\n                {/*<h3>Wage: {val.wage}</h3>*/}\r\n                \r\n              </div>\r\n              <div>\r\n                <button\r\n                  onClick={() => {\r\n                    scheduling(val.username,val.prefferedtime);\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  Approve\r\n                </button>\r\n                 {\"    \"}\r\n              </div>\r\n            </div>\r\n            </Box>\r\n          );\r\n                }\r\n        })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DoctorNotification;"]},"metadata":{},"sourceType":"module"}